{"version":3,"sources":["reportWebVitals.ts","style/index.ts","index.tsx","components/Layout/index.tsx","containers/pages/index.tsx","containers/index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Wrapper","styled","div","isFullScreen","height","isExpansion","Viewer","PagesWrapper","currentPage","direction","isSingleView","pagesLength","pageWidth","switchingFullScreen","CenterButton","a","NavigationButton","navigation","Page","width","Img","img","isOdd","Controller","aside","SubController","MainController","RangeInput","input","ScaleController","ControlButton","button","CloseButton","ComicViewer","className","initialCurrentPage","initialIsExpansion","onChangeCurrentPage","onChangeExpansion","onClickCenter","pagesProp","pages","switchingRatio","text","expansion","fullScreen","move","normal","isRightToLeft","useMemo","expansionText","useWindowSize","useState","setIsExpansion","setSwitchingFullScreen","handle","useFullScreenHandle","active","enter","exit","handleClickOnExpansion","useCallback","prevIsExpansion","handleClickOnFullScreen","handleClickOnClose","expansionIcon","color","size","reversePages","slice","reverse","length","items","map","page","index","alt","src","nanoid","setPrevIsExpansion","Math","floor","setCurrentPage","disabledNextPage","handleClickOnNextPage","prevCurrentPage","disabledPrevPage","handleClickOnPrevPage","showMove","setShowMove","handleClickOnShowMove","handleChange","value","currentTarget","parseInt","handleClickOnOutside","useOutsideClickRef","ref","handlers","useSwipeable","onSwipedLeft","onSwipedRight","isEnabled","screenfull","rangeMax","ceil","rangeValue","useEffect","undefined","useDidUpdate","wrapper","viewer","pagesWrapper","nextNavigationButton","onClick","centerButton","prevNavigationButton","closeButton","controller","subController","rangeInput","onChange","max","min","step","type","mainController","scaleController","expansionControlButton","fullScreenControlButton","showMoveControlButton","NoSSRComicViewer","props","window","Layout","children","onlyHeight","useWindowHeight","style","minHeight","Pages","setIsRightToLeft","prevIsRightToLeft","console","log","padding","alignItems","display","defaultChecked","icons","checked","unchecked","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a08ff0c.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import styled from \"@emotion/styled\";\n\nexport type WrapperProps = {\n  height: number;\n  isExpansion: boolean;\n  isFullScreen: boolean;\n};\n\nexport const Wrapper = styled.div<WrapperProps>`\n  background: #333;\n  color: #fff;\n  display: grid;\n  grid-template: ${({ isFullScreen }) =>\n    `1fr ${isFullScreen ? \"0\" : \"40px\"} / 1fr`};\n  height: ${({ height, isExpansion }) =>\n    `${height - (isExpansion ? 0 : 95)}px`};\n  max-height: ${({ height, isExpansion }) => `${isExpansion ? height : 840}px`};\n  min-height: ${({ isExpansion }) => `${isExpansion ? 0 : 440}px`};\n  overflow: hidden;\n  position: relative;\n  transition: 250ms;\n`;\n\nexport const Viewer = styled.div`\n  height: 100%;\n  position: relative;\n`;\n\nexport type PagesWrapperProps = {\n  currentPage: number;\n  direction: \"ltr\" | \"rtl\";\n  isSingleView: boolean;\n  pagesLength: number;\n  pageWidth: number;\n  switchingFullScreen: boolean;\n};\n\nexport const PagesWrapper = styled.div<PagesWrapperProps>`\n  direction: rtl;\n  display: grid;\n  grid-auto-flow: column;\n  height: 100%;\n  overflow: hidden;\n  position: absolute;\n  right: 0;\n  transform: translateX(\n    calc(\n      ${({ currentPage, direction, isSingleView, pagesLength, pageWidth }) =>\n        `${\n          direction === \"rtl\"\n            ? currentPage * pageWidth\n            : (pagesLength - (isSingleView ? 1 : 2) - currentPage) * pageWidth\n        }px`}\n    )\n  );\n  transition: ${({ switchingFullScreen }) =>\n    `${switchingFullScreen ? 0 : 250}ms`};\n`;\n\nexport const CenterButton = styled.a`\n  cursor: pointer;\n  height: 100%;\n  left: calc(100% / 3);\n  position: absolute;\n  top: 0;\n  width: calc(100% / 3);\n`;\n\nexport type NavigationButtonProps = {\n  direction: \"rtl\" | \"ltr\";\n  navigation: \"next\" | \"prev\";\n};\n\nexport const NavigationButton = styled.a<NavigationButtonProps>`\n  align-items: center;\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  display: flex;\n  height: 100%;\n  justify-content: ${({ direction, navigation }) =>\n    direction === \"rtl\"\n      ? navigation === \"next\"\n        ? \"flex-start\"\n        : \"flex-end\"\n      : navigation === \"next\"\n      ? \"flex-end\"\n      : \"flex-start\"};\n  opacity: 0.5;\n  right: ${({ direction, navigation }) =>\n    direction === \"rtl\"\n      ? navigation === \"next\"\n        ? \"auto\"\n        : \"0\"\n      : navigation === \"next\"\n      ? \"0\"\n      : \"auto\"};\n  padding: 0;\n  position: absolute;\n  transition: 250ms;\n  width: calc(100% / 3);\n  :hover {\n    opacity: 1;\n  }\n  @media (max-width: 980px) {\n    opacity: 0;\n    :hover {\n      opacity: 0;\n    }\n  }\n`;\n\nexport type PageProps = {\n  width: number;\n};\n\nexport const Page = styled.div<PageProps>`\n  overflow: hidden;\n  width: ${({ width }) => `${width}px`};\n`;\n\nexport type ImgProps = {\n  isOdd: boolean;\n  isSingleView: boolean;\n};\n\nexport const Img = styled.img<ImgProps>`\n  height: 100%;\n  object-fit: contain;\n  object-position: ${({ isOdd, isSingleView }) =>\n    isSingleView ? \"center\" : isOdd ? \"left\" : \"right\"};\n  width: 100%;\n`;\n\nexport const Controller = styled.aside`\n  bottom: 0;\n  box-sizing: border-box;\n  height: 40px;\n  left: 0;\n  padding: 0 16px;\n  position: absolute;\n  width: 100%;\n`;\n\nexport const SubController = styled.div`\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n`;\n\nexport const MainController = styled.div`\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: space-between;\n`;\n\nexport type RangeInputProps = {\n  direction: \"ltr\" | \"rtl\";\n};\n\nexport const RangeInput = styled.input<RangeInputProps>`\n  cursor: pointer;\n  max-width: 1024px;\n  transform: rotate(${({ direction }) => (direction === \"rtl\" ? 180 : 0)}deg);\n  width: 100%;\n`;\n\nexport const ScaleController = styled.div`\n  display: grid;\n  gap: 8px;\n  grid-auto-flow: column;\n  height: 100%;\n`;\n\nexport const ControlButton = styled.button`\n  align-items: center;\n  background: transparent;\n  border: 0;\n  color: #ccc;\n  cursor: pointer;\n  display: grid;\n  font-size: 14px;\n  gap: 8px;\n  grid-template: auto / auto auto;\n  height: 100%;\n  outline: none;\n`;\n\nexport const CloseButton = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  padding: 12px 12px;\n  position: absolute;\n  right: 0;\n  top: 0;\n`;\n","import React, {\n  ComponentPropsWithoutRef,\n  MouseEventHandler,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport {\n  CenterButton,\n  CloseButton,\n  ControlButton,\n  Controller,\n  Img,\n  ImgProps,\n  MainController,\n  NavigationButton,\n  Page,\n  PageProps,\n  PagesWrapper,\n  PagesWrapperProps,\n  RangeInput,\n  ScaleController,\n  SubController,\n  Viewer,\n  Wrapper,\n  WrapperProps,\n} from \"./style\";\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\nimport { nanoid } from \"nanoid\";\nimport {\n  BiChevronLeft,\n  BiChevronRight,\n  BiCollapse,\n  BiExpand,\n  BiFullscreen,\n  BiMoveHorizontal,\n} from \"react-icons/bi\";\nimport useOutsideClickRef from \"@rooks/use-outside-click-ref\";\nimport { CgClose } from \"react-icons/cg\";\nimport { useSwipeable } from \"react-swipeable\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport useDidUpdate from \"@rooks/use-did-update\";\nimport screenfull from \"screenfull\";\n\nexport type ClassName =\n  | \"centerButton\"\n  | \"closeButton\"\n  | \"controller\"\n  | \"expansionControlButton\"\n  | \"fullScreenControlButton\"\n  | \"img\"\n  | \"mainController\"\n  | \"nextNavigationButton\"\n  | \"page\"\n  | \"pagesWrapper\"\n  | \"prevNavigationButton\"\n  | \"rangeInput\"\n  | \"scaleController\"\n  | \"showMoveControlButton\"\n  | \"subController\"\n  | \"viewer\"\n  | \"wrapper\";\n\nexport type ComicViewerProps = {\n  className?: { [key in ClassName]?: string };\n  direction?: \"ltr\" | \"rtl\";\n  initialCurrentPage?: number;\n  initialIsExpansion?: boolean;\n  onChangeCurrentPage?: (currentPage: number) => void;\n  onChangeExpansion?: (isExpansion: boolean) => void;\n  onClickCenter?: MouseEventHandler<HTMLAnchorElement>;\n  pages: Array<string | ReactNode>;\n  switchingRatio?: number;\n  text?: Record<\"expansion\" | \"fullScreen\" | \"move\" | \"normal\", string>;\n};\n\nfunction ComicViewer({\n  className,\n  direction = \"rtl\",\n  initialCurrentPage = 0,\n  initialIsExpansion = false,\n  onChangeCurrentPage,\n  onChangeExpansion,\n  onClickCenter,\n  pages: pagesProp,\n  switchingRatio = 1,\n  text = {\n    expansion: \"Expansion\",\n    fullScreen: \"Full screen\",\n    move: \"Move\",\n    normal: \"Normal\",\n  },\n}: ComicViewerProps): JSX.Element {\n  const isRightToLeft = useMemo(() => direction === \"rtl\", [direction]);\n  const {\n    expansion: expansionText,\n    fullScreen,\n    move,\n    normal,\n  } = useMemo(() => text, [text]);\n  const [width, height] = useWindowSize();\n  const [isExpansion, setIsExpansion] =\n    useState<WrapperProps[\"isExpansion\"]>(initialIsExpansion);\n  const [switchingFullScreen, setSwitchingFullScreen] =\n    useState<PagesWrapperProps[\"switchingFullScreen\"]>(false);\n  const handle = useFullScreenHandle();\n  const { active, enter, exit } = useMemo(() => handle, [handle]);\n  const handleClickOnExpansion = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"button\">[\"onClick\"]>\n  >(() => {\n    setIsExpansion((prevIsExpansion) => !prevIsExpansion);\n  }, []);\n  const handleClickOnFullScreen = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"button\">[\"onClick\"]>\n  >(() => {\n    setSwitchingFullScreen(true);\n\n    enter();\n  }, [enter]);\n  const handleClickOnClose = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"button\">[\"onClick\"]>\n  >(() => {\n    setSwitchingFullScreen(true);\n\n    exit();\n  }, [exit]);\n  const pageWidth = useMemo<PageProps[\"width\"]>(\n    () => (height > width * switchingRatio ? width : width / 2),\n    [switchingRatio, height, width]\n  );\n  const expansion = useMemo<ComponentPropsWithoutRef<\"button\">[\"children\"]>(\n    () => (isExpansion ? normal : expansionText),\n    [expansionText, isExpansion, normal]\n  );\n  const expansionIcon = useMemo(\n    () =>\n      isExpansion ? (\n        <BiCollapse color=\"#fff\" size={24} />\n      ) : (\n        <BiExpand color=\"#fff\" size={24} />\n      ),\n    [isExpansion]\n  );\n  const isSingleView = useMemo<ImgProps[\"isSingleView\"]>(\n    () => height > width * switchingRatio,\n    [switchingRatio, height, width]\n  );\n  const pages = useMemo(() => {\n    if (isRightToLeft) {\n      return pagesProp;\n    }\n\n    const reversePages = pagesProp.slice().reverse();\n\n    if (isSingleView || reversePages.length % 2 === 0) {\n      return reversePages;\n    }\n\n    return [null, ...reversePages];\n  }, [isRightToLeft, isSingleView, pagesProp]);\n  const items = useMemo(\n    () =>\n      pages.map((page, index) => (\n        <Page className={className?.page} key={nanoid()} width={pageWidth}>\n          {typeof page === \"string\" ? (\n            <Img\n              alt={page}\n              className={className?.img}\n              isOdd={!(index % 2)}\n              isSingleView={isSingleView}\n              src={page}\n            />\n          ) : (\n            page\n          )}\n        </Page>\n      )),\n    [className?.img, className?.page, isSingleView, pageWidth, pages]\n  );\n  const [prevIsExpansion, setPrevIsExpansion] = useState<\n    typeof isExpansion | undefined\n  >();\n  const [currentPage, setCurrentPage] = useState(\n    isSingleView ? initialCurrentPage : Math.floor(initialCurrentPage / 2) * 2\n  );\n  const disabledNextPage = useMemo(\n    () =>\n      (isSingleView && currentPage >= pages.length - 1) ||\n      (!isSingleView && currentPage >= pages.length - 2),\n    [currentPage, isSingleView, pages.length]\n  );\n  const handleClickOnNextPage = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"a\">[\"onClick\"]>\n  >(() => {\n    if (disabledNextPage) {\n      return;\n    }\n\n    setSwitchingFullScreen(false);\n    setCurrentPage(\n      (prevCurrentPage) => prevCurrentPage + (isSingleView ? 1 : 2)\n    );\n  }, [disabledNextPage, isSingleView]);\n  const disabledPrevPage = useMemo(() => currentPage === 0, [currentPage]);\n  const handleClickOnPrevPage = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"a\">[\"onClick\"]>\n  >(() => {\n    if (disabledPrevPage) {\n      return;\n    }\n\n    setSwitchingFullScreen(false);\n    setCurrentPage(\n      (prevCurrentPage) => prevCurrentPage - (isSingleView ? 1 : 2)\n    );\n  }, [disabledPrevPage, isSingleView]);\n  const [showMove, setShowMove] = useState(false);\n  const handleClickOnShowMove = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"button\">[\"onClick\"]>\n  >(() => {\n    setShowMove(true);\n  }, []);\n  const handleChange = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"input\">[\"onChange\"]>\n  >(\n    ({ currentTarget: { value } }) => {\n      setSwitchingFullScreen(false);\n      setCurrentPage(\n        isSingleView ? parseInt(value, 10) - 1 : (parseInt(value, 10) - 1) * 2\n      );\n    },\n    [isSingleView]\n  );\n  const handleClickOnOutside = useCallback(() => {\n    setShowMove(false);\n  }, []);\n  const [ref] = useOutsideClickRef(handleClickOnOutside);\n  const handlers = useSwipeable({\n    onSwipedLeft: () => {\n      if (disabledPrevPage) {\n        return;\n      }\n\n      setSwitchingFullScreen(false);\n      setCurrentPage(\n        (prevCurrentPage) => prevCurrentPage - (isSingleView ? 1 : 2)\n      );\n    },\n    onSwipedRight: () => {\n      if (disabledNextPage) {\n        return;\n      }\n\n      setSwitchingFullScreen(false);\n      setCurrentPage(\n        (prevCurrentPage) => prevCurrentPage + (isSingleView ? 1 : 2)\n      );\n    },\n  });\n  const { isEnabled } = useMemo(() => screenfull, []);\n  const rangeMax = useMemo(\n    () => (isSingleView ? pages.length : Math.ceil(pages.length / 2)),\n    [isSingleView, pages.length]\n  );\n  const rangeValue = useMemo(\n    () => (isSingleView ? currentPage + 1 : Math.floor(currentPage / 2) + 1),\n    [currentPage, isSingleView]\n  );\n\n  useEffect(() => {\n    if (!active) {\n      if (typeof prevIsExpansion !== \"boolean\") {\n        return;\n      }\n\n      setPrevIsExpansion(undefined);\n      setIsExpansion(prevIsExpansion);\n\n      return;\n    }\n\n    if (typeof prevIsExpansion === \"boolean\") {\n      return;\n    }\n\n    setPrevIsExpansion(isExpansion);\n    setIsExpansion(true);\n  }, [active, isExpansion, prevIsExpansion]);\n\n  useDidUpdate(() => {\n    if (isSingleView) {\n      return;\n    }\n\n    setCurrentPage((prevCurrentPage) => Math.floor(prevCurrentPage / 2) * 2);\n  }, [isSingleView]);\n\n  useDidUpdate(() => {\n    if (!onChangeCurrentPage) {\n      return;\n    }\n\n    onChangeCurrentPage(currentPage);\n  }, [currentPage, onChangeCurrentPage]);\n\n  useDidUpdate(() => {\n    if (!onChangeExpansion) {\n      return;\n    }\n\n    onChangeExpansion(isExpansion);\n  }, [isExpansion, onChangeExpansion]);\n\n  return (\n    <FullScreen handle={handle}>\n      <Wrapper\n        className={className?.wrapper}\n        height={height}\n        isExpansion={isExpansion}\n        isFullScreen={active}\n        {...handlers}\n      >\n        <Viewer className={className?.viewer}>\n          <PagesWrapper\n            className={className?.pagesWrapper}\n            currentPage={currentPage}\n            direction={direction}\n            isSingleView={isSingleView}\n            pagesLength={pages.length}\n            pageWidth={pageWidth}\n            switchingFullScreen={switchingFullScreen}\n          >\n            {items}\n          </PagesWrapper>\n          {disabledNextPage ? null : (\n            <NavigationButton\n              className={className?.nextNavigationButton}\n              direction={direction}\n              navigation=\"next\"\n              onClick={handleClickOnNextPage}\n            >\n              {isRightToLeft ? (\n                <BiChevronLeft color=\"#888\" size={64} />\n              ) : (\n                <BiChevronRight color=\"#888\" size={64} />\n              )}\n            </NavigationButton>\n          )}\n          {onClickCenter ? (\n            <CenterButton\n              className={className?.centerButton}\n              onClick={onClickCenter}\n            />\n          ) : null}\n          {disabledPrevPage ? null : (\n            <NavigationButton\n              className={className?.prevNavigationButton}\n              direction={direction}\n              navigation=\"prev\"\n              onClick={handleClickOnPrevPage}\n            >\n              {isRightToLeft ? (\n                <BiChevronRight color=\"#888\" size={64} />\n              ) : (\n                <BiChevronLeft color=\"#888\" size={64} />\n              )}\n            </NavigationButton>\n          )}\n        </Viewer>\n        {active ? (\n          <CloseButton\n            className={className?.closeButton}\n            onClick={handleClickOnClose}\n          >\n            <CgClose color=\"#fff\" size={36} />\n          </CloseButton>\n        ) : (\n          <Controller className={className?.controller}>\n            {showMove ? (\n              <SubController className={className?.subController} ref={ref}>\n                <RangeInput\n                  className={className?.rangeInput}\n                  direction={direction}\n                  onChange={handleChange}\n                  max={rangeMax}\n                  min={1}\n                  step={1}\n                  type=\"range\"\n                  value={rangeValue}\n                />\n              </SubController>\n            ) : (\n              <MainController className={className?.mainController}>\n                <ScaleController className={className?.scaleController}>\n                  <ControlButton\n                    className={className?.expansionControlButton}\n                    onClick={handleClickOnExpansion}\n                  >\n                    {expansionIcon}\n                    {expansion}\n                  </ControlButton>\n                  {isEnabled ? (\n                    <ControlButton\n                      className={className?.fullScreenControlButton}\n                      onClick={handleClickOnFullScreen}\n                    >\n                      <BiFullscreen color=\"#fff\" size={24} />\n                      {fullScreen}\n                    </ControlButton>\n                  ) : null}\n                </ScaleController>\n                <ControlButton\n                  className={className?.showMoveControlButton}\n                  onClick={handleClickOnShowMove}\n                >\n                  <BiMoveHorizontal color=\"#fff\" size={24} />\n                  {move}\n                </ControlButton>\n              </MainController>\n            )}\n          </Controller>\n        )}\n      </Wrapper>\n    </FullScreen>\n  );\n}\n\nfunction NoSSRComicViewer(props: ComicViewerProps): JSX.Element | null {\n  return typeof window !== \"undefined\" ? <ComicViewer {...props} /> : null;\n}\n\nexport default NoSSRComicViewer;\n","import { ComponentPropsWithoutRef, ReactNode, useMemo } from \"react\";\nimport { useWindowHeight } from \"@react-hook/window-size\";\n\nexport type LayoutProps = {\n  children: ReactNode;\n};\n\nfunction Layout({ children }: LayoutProps): JSX.Element {\n  const onlyHeight = useWindowHeight();\n  const style = useMemo<ComponentPropsWithoutRef<\"div\">[\"style\"]>(\n    () => ({\n      minHeight: onlyHeight,\n    }),\n    [onlyHeight]\n  );\n\n  return <div style={style}>{children}</div>;\n}\n\nexport default Layout;\n","import ComicViewer from \"index\";\nimport Layout from \"components/Layout\";\nimport React, { ChangeEventHandler, useCallback, useState } from \"react\";\nimport Toggle from \"react-toggle\";\nimport \"react-toggle/style.css\";\n\nfunction Pages(): JSX.Element {\n  const [isRightToLeft, setIsRightToLeft] = useState(true);\n  const handleChange = useCallback<ChangeEventHandler<HTMLInputElement>>(() => {\n    setIsRightToLeft((prevIsRightToLeft) => !prevIsRightToLeft);\n  }, []);\n\n  return (\n    <Layout>\n      <ComicViewer\n        direction={isRightToLeft ? \"rtl\" : \"ltr\"}\n        initialCurrentPage={1}\n        initialIsExpansion={false}\n        onChangeCurrentPage={(currentPage) => {\n          console.log(currentPage);\n        }}\n        onChangeExpansion={(isExpansion) => {\n          console.log(isExpansion);\n        }}\n        onClickCenter={() => {\n          console.log(\"Click the center!\");\n        }}\n        pages={[\n          \"/comics/0.jpg\",\n          \"/comics/1.jpg\",\n          \"/comics/2.jpg\",\n          \"/comics/3.jpg\",\n          \"/comics/4.jpg\",\n          \"/comics/5.jpg\",\n          \"/comics/6.jpg\",\n        ]}\n        switchingRatio={0.75}\n        text={{\n          expansion: \"拡大\",\n          fullScreen: \"全画面\",\n          move: \"移動\",\n          normal: \"通常\",\n        }}\n      />\n      <div style={{ padding: \"16px\" }}>\n        <label style={{ alignItems: \"center\", display: \"inline-flex\" }}>\n          Direction:\n          <Toggle\n            defaultChecked={isRightToLeft}\n            icons={{\n              checked: (\n                <div\n                  style={{\n                    alignItems: \"center\",\n                    color: \"#fff\",\n                    display: \"flex\",\n                    height: \"100%\",\n                  }}\n                >\n                  rtl\n                </div>\n              ),\n              unchecked: (\n                <div\n                  style={{\n                    alignItems: \"center\",\n                    color: \"#fff\",\n                    display: \"flex\",\n                    height: \"100%\",\n                  }}\n                >\n                  ltr\n                </div>\n              ),\n            }}\n            onChange={handleChange}\n          />\n        </label>\n      </div>\n    </Layout>\n  );\n}\n\nexport default Pages;\n","import React, { StrictMode } from \"react\";\nimport { render } from \"react-dom\";\nimport reportWebVitals from \"reportWebVitals\";\nimport Pages from \"./pages\";\nimport \"./styles/global.scss\";\n\nrender(\n  <StrictMode>\n    <Pages />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}